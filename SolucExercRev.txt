1.
a) A notação assintótica O.grande permite classificar o algoritmo quanto a um limite para o tempo de execução (ou nº de operações ou gasto de recurso). Em geral, a classificação usa um limite superior.

b) Diferenças entre O(1), O(logn), O(n), O(n^2):
O(1), significa que o algoritmo executa um nº constante de operações
independentemente da dimensão dos dados de entrada. Para as restantes, o algoritmo tem nº de operações dependente da dimensão do input e com taxas de crescimento diferentes, segundo a ordem: O(logn) <= O(n) <= O(n^2) e O(1) é a mais eficiente de todas.

c) O pior dos casos para este algoritmo é o elemento a pesquisar não existir na estrutura. Se esta dimensão tem dimensão n, então T(n)=O(n). Neste caso o algoritmo tem de verificar todas as n posições para concluir que não pertence.

d) Sim: o de executar o elemento nas "primeiras" posições. Nesse caso, poderíamos dizer que é O(1) mas na verdade a pesquisa tem sempre que verificar posições uma a uma, logo, acaba por ser O(n), mesmo que fazendo menos comparações.

e) A estratégia geral para a pesquisa binária é "dividir-e-conquistar":
- divide a sequência em 2 metades (n/2).
- continua a pesquisa numa das metades.

2. 
a) op. elementares: aritméticas e comparações -> 5
caso paragem: n=1 ou n=2
T(1)=1, T(2)=2
caso geral:
T(n) = T(n-2) + 5, n>2
= T(n-2-2) + 5 + 5 = ... = T(n-2k) + 5k
A recursão pára quando n-2k = 2 se n é par, k = n/2-1
Logo, T(n) = T(2) + 5n/2 - 5 = 5n/2 - 3
E se n é ímpar a recursão pára em n-2k = 1, logo k = (n-1)/2 e vem T(n) = T(1) + 5(n-1)/2 = 5n/2 + 1/2

Conclusão: para qualquer n, T(n) = O(n)

3.
a) usar o método de indução:
caso base: 
A inicialização da solução p é p=a[0]=Somatório de i=0 a 0: pi*x^i, logo, se n=0, devolvemos a pesquisa correta.
passo indutivo:
-hipótese de indução: para n<k-1, p=Somatório de i=0 a k-1 : ai*x^i e px=x^(k-1) 
A próxima iteração (k) vai fazer px=x*x^(k-1) ->usando a hip de indunção e 
p=Somatório de i=0 a k-1 pi*ai^i + a[k]*px = 
=Somatório de i=0 a k-1 pi*ai^i + ak*x^k = Somatório de i=0 a k ai*x^i LOGO a propriedade é verdade para k

b) 
Op. elementares:
- Acessos: 1 acesso à entrada e no ciclo (acesso ao array)
- Ops aritméticas: 3 (no ciclo)
Como no ciclo há 4 operações e o ciclo tem n iterações: 4*n

T(n) = 4n + 1 ->O(n)

c) Pesquisa exaustiva: o algoritmo precisa de usar todos os valores do array e fazer todas as potências de x.

d)Aqui não há melhorias que possam ser feitas em relação à ordem de complexidade. Portanto o que se pode fazer é diminuir o número de operações elementares:

Alg Polinomio(a, x, n):
	p <- 0
	Para i a variar de n a 0:
		p <- x*(a[i]+p)
		p <- p+a[0]
4.
a) T(n) = 8n + 5 -> O(n)

8.
a) Algoritmo par(n):
	//input: número int positivo
	//output: T ou F
	se n==0: devolve True
	se n==1: devolve False
	par(n-2)

Solução Alternativa: 
Algoritmo par(n):
	//input: número int positivo
	//output: T ou F
	se n==1: devolve True
	se n<1: devolve False
	par(n/2)

b)
n=0, T(n) = 1
n=1, T(n) = 2
n>1, T(n) = T(n-2) + 3

T(n-2k) + 3k

c)
(Par) Condição de paragem: n-2k = 0 <=> k = n/2
T(0) + 3(n/2) = 1 + 3(n/2)

(Ímpar) Condição de paragem: n-2k = 1 <=> k = (1-n)/2
T(1) + 3(1-n)/2 = 2 + (3-3n)/2

d) Diminuir e conquistar, porque o n está a diminuir. Não é brute force porque não se passa por todos os n. Se fosse a solução alternativa seria Dividir e Conquistar. 

e) Podemos melhorar o algoritmo retirando a recursividade, através de alterações no código usando o resto: n MOD 2 == 0 (para verificar se é par).



----------------------------------------------------------
Lembre-se das classes de complexidade mais comuns: O(1), O(log n), O(n), O(n log n), O(n²), O(n³) e assim por diante.

Pense no crescimento relativo das funções. Por exemplo, n log n cresce mais rapidamente do que n, que cresce mais rapidamente do que log n.

Pratique a identificação das ordens de complexidade de algumas expressões comuns. Tente identificar a ordem de complexidade de funções como 2n, n², n!, 2^n, log n e assim por diante.

--------
1. O(1) - Funções constantes, que não dependem do tamanho do input.

2. O(log n) - Funções logarítmicas, que crescem mais devagar do que qualquer potência de n.

3. O(sqrt(n)) - Funções de raiz quadrada, que crescem mais devagar do que qualquer potência de n, mas mais rápido do que log n.

4. O(n) - Funções lineares, que crescem proporcionalmente ao tamanho do input.

5. O(n log n) - Funções logarítmicas lineares, que crescem mais devagar do que qualquer potência de n, mas mais rápido do que n.

7. O(n^2) - Funções quadráticas, que crescem proporcionalmente ao quadrado do tamanho do input.

8. O(n^3) - Funções cúbicas, que crescem proporcionalmente ao cubo do tamanho do input.

9. O(2^n) - Funções exponenciais, que crescem exponencialmente com o tamanho do input.

10. O(n!) - Funções fatoriais, que crescem mais rápido do que qualquer exponencial.

-----------------------------------
Invariante: A cada iteração do algoritmo, a sublista que está sendo considerada contém o valor procurado (se ele estiver na lista original).

Base: Para o caso mais simples, suponha que a lista original contenha apenas um elemento. Neste caso, o algoritmo sempre encontra o elemento procurado imediatamente e retorna seu índice. O invariante é verdadeiro, pois a sublista sendo considerada contém apenas o elemento procurado.

Hipótese de indução: Suponha que o invariante seja verdadeiro para uma lista de tamanho n. Ou seja, a cada iteração do algoritmo, a sublista que está sendo considerada contém o valor procurado.

Passo de indução: Considere uma lista de tamanho n+1. Divida a lista em duas sublistas, cada uma com aproximadamente metade do tamanho da lista original. Compare o elemento procurado com o elemento do meio da lista. Se o elemento procurado for menor do que o elemento do meio, faça uma busca binária na primeira metade da lista. Caso contrário, faça uma busca binária na segunda metade da lista. Em ambos os casos, o invariante continua a ser verdadeiro, pois a sublista sendo considerada ainda contém o elemento procurado.

Conclusão: Como o algoritmo de busca binária é recursivo, a hipótese de indução pode ser aplicada a todas as chamadas recursivas até que a lista seja reduzida ao caso base. Portanto, o invariante é verdadeiro para todas as iterações do algoritmo e a solução encontrada é a correta.

Note que a escolha do invariante é importante para a prova de correção por indução matemática. Ele deve ser uma propriedade verdadeira antes da primeira iteração do algoritmo, e deve ser preservado em cada iteração até que o algoritmo retorne a solução correta. Além disso, é importante escolher um caso base simples o suficiente para ser facilmente verificável e escolher um passo de indução que mantenha a propriedade verdadeira.



